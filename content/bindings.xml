<?xml version="1.0"?>

<bindings id="messageBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="identity">
    <implementation>
      <property name="obj">
        <!--The GlodaIdentity -->
        <getter>
            <![CDATA[
            return this._identity;
            ]]>
        </getter>
        <setter>
        <![CDATA[
        try {
            this._identity = val;
            var name = document.getAnonymousElementByAttribute(this, "anonid", "name");
            if (val.contact == parent.Gloda.myContact) {
              name.textContent = "You"; // localize XXX
            } else {
              name.textContent = makeFriendlyName(val.contact.name);
            }
        } catch (e) {
           dumpExc(e, 'identity');
        }
        ]]>
        </setter>
      </property>
    </implementation>
    <content><html:div xbl:inherits="class=divclass" anonid="name"></html:div></content>
  </binding>


  <binding id="participation">
    <implementation>
      <method name="addParticipantNode">
        <parameter name="participantsNodeId"/>
        <parameter name="participant"/>
        <parameter name="participantType"/>
        <body><![CDATA[
        try {
            let participantNode = document.createElement('identity');
            let participantsNode = document.getAnonymousElementByAttribute(this, "anonid", participantsNodeId);
            participantsNode.appendChild(participantNode);
            participantNode.setAttribute("divclass", "participant " + participantType);

            participantNode.obj = participant;
        } catch (e) {
          dumpExc(e, "addParticipantNode");
        }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="message" extends="chrome://experimentaltoolbar/content/bindings.xml#participation">
    <implementation>
      <property name="obj">
        <!--The GlodaMessage -->
        <getter>
            <![CDATA[
            return this._message;
            ]]>
        </getter>
        <setter>
        <![CDATA[
            this._message = val;
            this._update();
          ]]>
        </setter>
      </property>
      <method name="_update">
        <body>
        <![CDATA[
        try {
            var subject = document.getAnonymousElementByAttribute(this, "anonid", "subject");
            subject.textContent = this._message.conversation.subject
            parent.MsgHdrToMimeMessage(this._message.folderMessage, this, this.addMessageBody)
            var date = document.getAnonymousElementByAttribute(this, "anonid", "date");
            date.textContent = makeDateFriendly(this._message.date);
        } catch (e) {
           dumpExc(e, 'message');
        }
        ]]>
        </body>
      </method>
      <field name="mimeMsg">null</field>
      <method name="addMessageBody">
        <parameter name="msgHdr"/>
        <parameter name="mimeMsg"/>
        <body><![CDATA[
        try {
            this.mimeMsg = mimeMsg;
            this._updateMsgBody();
        } catch (e) {
          dumpExc(e);
        }
        ]]>
        </body>
      </method>
      <method name="_updateMsgBody">
        <body><![CDATA[
        try {
            var snippetNode = document.getAnonymousElementByAttribute(this, "anonid", "snippet");
            snippet = findSnippetInMimeMsg(this.mimeMsg);
            snippetNode.textContent = snippet;
        } catch (e) {
          dumpExc(e);
        }
        ]]>
        </body>
      </method>
    </implementation>
    <content>
        <html:div class="message">
          <html:div class="subject" anonid="subject"></html:div>
          <html:div class="snippet" anonid="snippet"></html:div>
        </html:div>
        <html:div class="date" anonid="date"></html:div>
    </content>
  </binding>  <!--message-->

  <binding id="fullmessage" extends="chrome://experimentaltoolbar/content/bindings.xml#message">
    <implementation>
      <method name="_updateMsgBody">
        <body><![CDATA[
        try {
            body = this.mimeMsg.body;
            var bodyNode= document.getAnonymousElementByAttribute(this, "anonid", "body");
            bodyNode.textContent = body;
            this.addParticipantNode('from', this._message.from, 'from');
            let tos = Iterator(this._message.to);
            for (let [indx,to] in tos) {
              this.addParticipantNode('to', to, 'to');
            }
        } catch (e) {
          dumpExc(e);
        }
        ]]>
        </body>
      </method>
    </implementation>
    <content>
      <html:div class="message wrap">
        <html:div class="message details">
          <html:div class="msgheader">
            <html:div class="participants" anonid="from"/>
            <html:div class="participants" anonid="to"/>
          </html:div>
          <html:div class="subject" anonid="subject"></html:div>
          <html:div class="body" anonid="body"></html:div>
        </html:div>
        <html:div class="date" anonid="date"></html:div>
      </html:div>
    </content>
  </binding>

  <binding id="reply" extends="chrome://experimentaltoolbar/content/bindings.xml#message">
    <implementation>
      <method name="_update">
        <body>
        <![CDATA[
        try {

            let participantNode = document.createElement('identity');
            let participantsNode = document.getAnonymousElementByAttribute(this, "anonid", "replyparticipants");
            participantsNode.appendChild(participantNode);
            participantNode.setAttribute("divclass", "participant from");
            participantNode.obj = this._message.from;

            parent.MsgHdrToMimeMessage(this._message.folderMessage, this, this.addMessageBody)
            var date = document.getAnonymousElementByAttribute(this, "anonid", "date");
            date.textContent = makeDateFriendly(this._message.date);
        } catch (e) {
           dumpExc(e, 'reply');
        }
        ]]>
        </body>
      </method>
    </implementation>
    <content>
      <html:div class="reply">
        <html:div class="participants" anonid="replyparticipants"></html:div>
        <!--<html:div class="subject" anonid="subject"></html:div>-->
        <html:div class="message">
          <html:div class="snippet" anonid="snippet"></html:div>
        </html:div>
      </html:div>
      <html:div class="date" anonid="date"></html:div>
    </content>
  </binding>


  <binding id="conversation" extends="chrome://experimentaltoolbar/content/bindings.xml#participation">
    <resources>
      <stylesheet src="chrome://experimentaltoolbar/content/bindings.css"/>
    </resources>
    <implementation>
      <property name="obj">
        <!--This is the GlodaConversation object-->
        <getter>
            <![CDATA[
            return this.conversation;
            ]]>
        </getter>
        <setter>
        <![CDATA[
        try {
            this.conversation = val;

            // figure out participants, and add them
            // note: added in order of
            //   -  sender of first message is special (conversation originator)
            //   -  sender of subsequent messages (active speakers)
            //   -  then recipients (targets)
            //   -  then cc'ed (witnesses)
            let participants = {};

            let originator = this.conversation.messages[0].from;
            participants[originator] = true;
            this.addParticipantNode('participants', originator, "originator")
            for each (let message in this.conversation.messages)
            {
              let sender = message.from;
              if (! (sender in participants))
              {
                participants[sender] = true;
                this.addParticipantNode('participants', sender, "speaker")
              }
              for each (let identity in message.to)
              {
                if (! (identity in participants))
                {
                  participants[identity] = true;
                  this.addParticipantNode('participants', identity, "recipient")
                }
              }
              for each (let identity in message.cc)
              {
                if (! (identity in participants))
                {
                  participants[identity] = true;
                  this.addParticipantNode('participants', identity, "recipient cc")
                }
              }
            }

            let message = document.getAnonymousElementByAttribute(this, "anonid", "message");
            message.obj = this.conversation.messages[0];

            // find all the replies to this message
            let messageIter = Iterator(this.conversation.messages);
            messageIter.next()
            let replies = document.getAnonymousElementByAttribute(this, "anonid", "replies");
            while (replies.firstChild)
              replies.removeChild(replies.firstChild);
              
            for each (let [i,replyMsg] in messageIter) {
              let replyNode = document.createElement('reply');
              replies.appendChild(replyNode);
              replyNode.obj = replyMsg;
            }
        } catch (e) {
           dumpExc(e, 'reply');
        }
        ]]>
        </setter>
      </property>
    </implementation>

    <handlers>
      <handler event="click" phase="capturing" button="0" preventdefault="true">
        <![CDATA[
        // when a conversation is selected, show the messages in the conversation view.
      try {
        let conversationNode = document.getElementById('messagelist'); // XXX make generic
        while (conversationNode.firstChild)
          conversationNode.removeChild(conversationNode.firstChild);
        let messages = Iterator(this.conversation.messages);
        let indx, msg, msgNode;
        for each ([indx, msg] in messages) {
          msgNode = document.createElement('fullmessage');
          conversationNode.appendChild(msgNode);
          msgNode.obj = msg;
        }
        $("#backButton").animate({'opacity': 1})
        $(".rhs").animate({'width': "40em"})
        $(".conversations").animate({'marginRight': "41em"});
        $("#commandbox").slideUp();
        $(conversationNode).slideDown();
      } catch (e) {
        dumpExc(e);
      }
      ]]>
      </handler>
    </handlers>
    
    <content>
      <html:div class="conversation">
        <html:div class="conversation wrap">
          <html:div class="participants" anonid="participants"></html:div><message anonid="message"/>
          <html:div class="replies" anonid="replies"></html:div>
        </html:div>
      </html:div>
    </content>  
  </binding>

</bindings>
